<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="Learning C Programming" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1700310382" ts_lastsave="1700310444">
    <node name="Basics" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1700310449" ts_lastsave="1700630528">
      <rich_text>https://www.learn-c.org/


int main() {
	... some code
}

When returning an int a number greater than 0 means failure, 0 means success.

Integers - whole numbers which can be either positive or negative.
Integers = char, int, short, long, long long

Unsigned integers - whole numbers which can only be positive. Defined using unsigned char, unsigned int, unsigned short, unsigned long or unsigned long long.

Floating point numbers - real numbers with fractions. Defined using float and double.

char  range only from -128 to 127.
long ranges from -2,147,483,648 to 2,147,483,647 on 32-bit Machines
And
long ranges from –9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 on 64-bit Machines.

C does not have a boolean type.
Usually defined using the following notation:
#define BOOL char
#define FALSE 0
#define TRUE 1

Defining an array of integers
int myIntArray[21]; /* This means that myIntArray can only have 21 integers at any given time. */

Multidimensional array declaration:
type name[size1][size2]...[sizeN]
char vowels[][5] = {
	{'A', ‘E’, ‘I’, ‘O’, ‘U’},
	{'a', ‘e’, ‘i’, ‘o’, ‘u’}
}; /* also works. */

char characterO = vowels[0][3];

When declaring an array
arrayX[5][11]; indicates that there are 5 rows and 11 collumns, it does not mean that there are 4 rows and 10 collumns.

Conditions:
	int target = 10;
	if (target == 10) {
		printf("Target is equal to 10");
	} else if (target &gt; 10) {
		printf("Target is bigger than 10");
	} else {
		printf("Target is lesser than 10");
	}
	
Operators:
	== - Equals
	&amp;&amp; - And
	|| - Or
	! - Not


Strings:
	Strings in C are actually arrays of characters.
	char * city = “Glasgow”; /* Read only String/array of characters. */
	char city[] = “Glasgow”; /* Changeable String/array of characters */
	
	char city[8] = “Glasgow”; Is equivalent to the one above.
	A special character equal to 0 indicates end of the string. Which is why string length is always strlen + 1.
	
	printf formatting for string is %s.
	
	String Length:
		char * city = “Detroit”;
		printf("%d\n", strlen(city));
		
	String comparison:
		char * city = “Detroit”;
		
		if (strncmp(city, “Detroit”, 6) == 0) {
			printf("You are in Detroit!\n");
		} else {
			printf("You are not in Detroit.\n");
		}
		
	String Concatenation:
		/// The following code Concatenates src to dest
		/// strncat( destination string, source string, n - maximum number of characters to be appended)
		char dest[30] = “You have arrived at: ”;
		char src[30] = “Lake”;
		
		strncat(dest,src, 30);
	
Loops:
	int i;
	for (i = 0; i &lt; 10; i++) {
		printf("%d\n", i);
	}
	
	int n = 0;
	while (n&lt;10) {
		n++;
	}
	
	while (1) {
		/* Infinite loop */
	}
	
	break; - ends the loop.
	continue; - stops the current iteration of the loop and goes to the next one bypassing any code that would be executed after continue.
	
Functions:
	Functions can either return 1 value or no value.
	
	int foo(int bar) {
		return bar * 2;	
	}
	
	void moo(){
		/* Returns no value */
	}
	
	CORREECT USE OF FUNCTIONS:
	int func1(int arg):
	char cityName(char arg);
	
	int main(){
		func1(10);
		cityName('5');
	}
	
	int func1(int arg){
		///SOME CODE
	}
	
	int cityName(int arg){
		///SOME CODE
	}
	
Static:
	Variables only exist in the scope they are declared.
	Static variables exist in the scope of the whole file.
	Static function has its scope reduced to the file containing it.
	
	static void fun(void){
	}</rich_text>
    </node>
    <node name="Advanced" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1700630523" ts_lastsave="1700637532">
      <rich_text>POINTERS:
	Pointer - variable that holds a memory address that points to a value, instead of holding the value itself.
	
	The following line:
		char * city = “Berlin”;
	
	Does three things:
		Allocates a local stack variable called name, which is a pointer to a single character.
		It causes the string “John” to appear somewhere in the program memory.
		It initializes the name argument to point to where the J character resides at, followed by the rest of the string like an array.
		
	Dereferencing:
		Dereferencing - is the act of referring to where the pointer points, instead of the memory address.
		Arrays are a type of dereferencing.
		
		Example:
			int b = 7;
			int *point_to_b = &amp;b;
			
			b += 1;
			*point_to_b += 1;
			
			printf("Value of b: %d", b); //Prints out 9.
	
STRUCTURES:
	Structures - large variables which contain seeral named variables inside.
	
	struct point {
		int x;
		int y;
	};
	
	struct point p;
	p.x = 11;
	p.y = -2;
	
	typedef struct {
		int x;
		int y;
	} point;
	
	Allows us to define a new point like this:
		point p;
		
	The main strenght of Structures is that they can hold pointers.
	
	typedef struct {
		char * brand;
		int model;
	} vehicle;
	
FUNCTION ARGUMENTS BY REFERENCE:
	Passing arguments by reference allows us to read and write the value instead of just copying it.
	
	
	void subtractone(int *n) {
		(*n)--;
	}
	
	int n;
	printf("Before: %d\n", n);
	subtractone(&amp;n);
	printf("After: %d\n", n);
	
	Pointers to structures:
		void move (point *p) {
			(*p).x++;
			(*p).y++;
		}
		
		or 
		
		void move(point *p){
			p-&gt;x++;
			p-&gt;y++;
		}
DYNAMIC ALLOCATION:
	Dynamic allocation - allows us to store data without initially knowing the size of the data.
	
	typdef struct {
		char * name;
		int age;
	} person;
	
	person *myperson = (person *) malloc(sizeof(person)); /* This tells the compiler we want to allocate just enough memory to hold person. */
		malloc() - reserves specified memory space.
		(person *) - indicates that malloc returns a person pointer.
		
	To access the person's member, we can use the -&gt; notation:
		myperson-&gt;name = “JJ”;
		myperson-&gt;age = “35”;
		
	fr

ARRAYS AND POINTERS:

RECURSION:

BINARY TREES:

UNIONS:

POINTER  ARITHMETICS:

FUNCTION POINTERS:

BITMASKS:</rich_text>
    </node>
    <node name="Function arguments by reference" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1700629023" ts_lastsave="1700629383">
      <rich_text>Call by value:
	int a = 10;
	int b = 20;
	int c = 30;
	int someFunc(int a, int b){
		Some code
	}
	
	Call by value takes variables as arguments and deals with them only in the correct scope. someFunc is unable to edit variable c because its out of scope for someFunc.
	
	int anotherFunc(int &amp;a, int &amp;b){
		Some code
	}
	
	Call by reference is able to change the value of a and b outside of the scope of the function. </rich_text>
    </node>
  </node>
</cherrytree>
